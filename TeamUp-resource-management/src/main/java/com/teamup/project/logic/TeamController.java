package com.teamup.project.logic;

import java.time.LocalDate;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.time.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;

import com.teamup.project.entities.TeamEntity;
import com.teamup.project.entities.UserEntity;
import com.teamup.project.enums.ErrorType;
import com.teamup.project.exceptions.ApplicationException;
import com.teamup.project.repository.TeamApplicationRepos;
import com.teamup.project.repository.TeamRepos;
import com.teamup.project.repository.UserRepos;

@Controller
public class TeamController {

	@Autowired
	private TeamRepos teamRepos;
	@Autowired 
	private UserRepos userRepos;

	// ---------------------------------Creates a team------------------------------------

	public long createTeam (TeamEntity team, long teamLeaderId) throws ApplicationException {

		// Gets the team leader by id
		UserEntity teamLeader = userRepos.getUser(teamLeaderId);
		
		// Setting the team leader
		team.setTeamLeader(teamLeader);
		
		// Making a teamMember array list with the leader in it
		List<UserEntity> teamMembers = new ArrayList<UserEntity>();
		teamMembers.add(teamLeader);
		team.setTeamMembers(teamMembers);
		
		if(team.getTeamLeader() == null) {
			throw new ApplicationException (ErrorType.WORNG_INPUT, "There should be a valid team leader");
		}
		
		if (team.getTeamMembers().isEmpty()) {
			throw new ApplicationException (ErrorType.EMPTY_TEAM, "There should be atleast one team member");
		}
		
		if (team.getStartDate().getDate() != LocalDate.now().getDayOfMonth()) {
			throw new ApplicationException (ErrorType.ILLEGAL_USER_INPUT, "Team start date should only be today");
		}

		if (team.getEndDate().before(team.getStartDate())) {
			throw new ApplicationException (ErrorType.ILLEGAL_USER_INPUT, "Team end date should be after start date");
		}

		long autoGeneratedId = teamRepos.createTeam(team);

		return autoGeneratedId;
	}
	
	// ---------------------------------Updates a team------------------------------------

	public void addTeamMember(long teamId, long userId) throws ApplicationException {
		
		// Fetches the user object by id
		UserEntity member = userRepos.getUser(userId);
		
		if (member == null) {
			throw new ApplicationException (ErrorType.DATA_NOT_FOUND, "The user with the id " + userId + " could not be found");
		}
		
		// Fetches the team object by id
		TeamEntity team = teamRepos.getTeam(teamId);
		
		if (team == null) {
			throw new ApplicationException (ErrorType.DATA_NOT_FOUND, "The team with the id " + teamId + " could not be found");
		}
		
		// Makes a temporary team member list
		Collection<UserEntity> teamMembersUpdated = team.getTeamMembers();
		
		// Adds the team member to the list
		teamMembersUpdated.add(member);
		
		// Puts the list in the temporary object
		team.setTeamMembers(teamMembersUpdated);
		
		// Updates the entity in the database
		teamRepos.updateTeam(team);
	}

	// ---------------------------------Getters------------------------------------
	
	public TeamEntity getTeam(long id) throws ApplicationException {
		
		return teamRepos.getTeam(id);
	}
	
	public List<TeamEntity> getUserTeams(long userId) throws ApplicationException {
		return teamRepos.getUserTeams(userId);
	}

}
