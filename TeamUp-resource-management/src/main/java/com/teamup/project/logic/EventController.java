package com.teamup.project.logic;

import java.time.LocalDate;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import com.teamup.project.entities.EventEntity;
import com.teamup.project.entities.UserEntity;
import com.teamup.project.enums.ErrorType;
import com.teamup.project.exceptions.ApplicationException;
import com.teamup.project.repository.EventRepos;
import com.teamup.project.repository.UserRepos;

@Controller
public class EventController {

	@Autowired
	private EventRepos eventRepos;
	@Autowired 
	private UserRepos userRepos;

	// ---------------------------------Creates a event------------------------------------

	public long createEvent (EventEntity event, long eventLeaderId) throws ApplicationException {

		// Gets the event leader by id
		UserEntity eventLeader = userRepos.getUser(eventLeaderId);
		
		// Setting the event leader
		event.setEventLeader(eventLeader);
		
		// Making a eventMember array list with the leader in it
		List<UserEntity> eventMembers = new ArrayList<UserEntity>();
		eventMembers.add(eventLeader);
		event.setEventMembers(eventMembers);
		
		if(event.getEventLeader() == null) {
			throw new ApplicationException (ErrorType.WORNG_INPUT, "There should be a valid event leader");
		}
		
		if (event.getEventMembers().isEmpty()) {
			throw new ApplicationException (ErrorType.EMPTY_TEAM, "There should be atleast one event member");
		}
		
		if (event.getStartDate().getDate() != LocalDate.now().getDayOfMonth()) {
			throw new ApplicationException (ErrorType.ILLEGAL_USER_INPUT, "Event start date should only be today");
		}

		if (event.getEndDate().before(event.getStartDate())) {
			throw new ApplicationException (ErrorType.ILLEGAL_USER_INPUT, "Event end date should be after start date");
		}

		long autoGeneratedId = eventRepos.createEvent(event);

		return autoGeneratedId;
	}
	
	// ---------------------------------Updates a event------------------------------------

	public void addEventMember(long eventId, long userId) throws ApplicationException {
		
		// Fetches the user object by id
		UserEntity member = userRepos.getUser(userId);
		
		if (member == null) {
			throw new ApplicationException (ErrorType.DATA_NOT_FOUND, "The user with the id " + userId + " could not be found");
		}
		
		// Fetches the event object by id
		EventEntity event = eventRepos.getEvent(eventId);
		
		if (event == null) {
			throw new ApplicationException (ErrorType.DATA_NOT_FOUND, "The event with the id " + eventId + " could not be found");
		}
		
		// Makes a temporary event member list
		Collection<UserEntity> eventMembersUpdated = event.getEventMembers();
		
		// Adds the event member to the list
		eventMembersUpdated.add(member);
		
		// Puts the list in the temporary object
		event.setEventMembers(eventMembersUpdated);
		
		// Updates the entity in the database
		eventRepos.updateEvent(event);
	}

	// ---------------------------------Getters------------------------------------
	
	public EventEntity getEvent(long id) throws ApplicationException {
		
		return eventRepos.getEvent(id);
	}
	
	public List<EventEntity> getUserEvents(long userId) throws ApplicationException {
		return eventRepos.getUserEvents(userId);
	}

}
