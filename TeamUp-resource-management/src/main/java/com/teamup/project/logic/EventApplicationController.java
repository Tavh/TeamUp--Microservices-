package com.teamup.project.logic;

import java.time.LocalDate;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import com.teamup.project.entities.EventApplicationEntity;
import com.teamup.project.entities.EventEntity;
import com.teamup.project.entities.UserEntity;
import com.teamup.project.enums.ErrorType;
import com.teamup.project.exceptions.ApplicationException;
import com.teamup.project.repository.EventApplicationRepos;
import com.teamup.project.repository.EventRepos;
import com.teamup.project.repository.UserRepos;

@Controller
public class EventApplicationController {
	
	@Autowired
	private EventApplicationRepos eventAppRepos;
	@Autowired
	private UserRepos userRepos;
	@Autowired
	private EventRepos eventRepos;
	
	// ---------------------------------Creates an invitation ------------------------------------
	
	public long createEventApplication (long senderId, long eventId, EventApplicationEntity app) throws ApplicationException {

		UserEntity sender = userRepos.getUser(senderId);
		EventEntity event = eventRepos.getEvent(eventId);
		
		app.setSender(sender);
		app.setEvent(event);
		
		if(app.getSender() == null) {
			throw new ApplicationException (ErrorType.WORNG_INPUT, "The event application should have a valid sender");
		}
		
		if(app.getEvent() == null) {
			throw new ApplicationException (ErrorType.WORNG_INPUT, "The event application should be destined to a valid event");
		}
		
		boolean isUserInEvent = userRepos.isUserInEvent(senderId, eventId);
		
		if (isUserInEvent) {
			throw new ApplicationException (ErrorType.WORNG_INPUT, "User " + sender.getNickname() + " is already in event " + event.getEventTitle());
		}
		
		boolean isApplicationPending = eventAppRepos.isEventApplicationPending(senderId, eventId);
		
		if (isApplicationPending) {
			throw new ApplicationException (ErrorType.WORNG_INPUT, "User " + sender.getNickname() + " has already requested to join event " + event.getEventTitle());
		}
		
		Date appCreationDate = new Date(app.getStartDate());
		
		if (appCreationDate.getDate() != LocalDate.now().getDayOfMonth()) {
			throw new ApplicationException (ErrorType.WORNG_INPUT, "Event application creation date should only be today");
		}
		
		long autoGeneratedId = eventAppRepos.createEventApplication(app);

		return autoGeneratedId;
	}

	// ---------------------------------Deletes a event application------------------------------------

	public void removeEventApplication(long id) throws ApplicationException {
		
		if (eventAppRepos.getEventApplication(id) == null) {
			throw new ApplicationException (ErrorType.DATA_NOT_FOUND, "The event application with the id " + id + " could not be found");
		}
		
		eventAppRepos.removeEventApplication(id);
	}

	// ---------------------------------Getters------------------------------------
	
	public EventApplicationEntity getEventApplication(long id) throws ApplicationException {
		return eventAppRepos.getEventApplication(id);
	}
	
	// Gets all event applications in a event 
	public List<EventApplicationEntity> getEventApplicationsInEvent(long eventId) throws ApplicationException {
		return eventAppRepos.getEventApplicationsInEvent(eventId);
	}
	
}
